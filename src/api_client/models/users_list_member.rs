/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: support@slack.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UsersListMember {
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(rename = "deleted")]
    pub deleted: bool,
    #[serde(rename = "has_2fa", skip_serializing_if = "Option::is_none")]
    pub has_2fa: Option<bool>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "is_admin", skip_serializing_if = "Option::is_none")]
    pub is_admin: Option<bool>,
    #[serde(rename = "is_app_user", skip_serializing_if = "Option::is_none")]
    pub is_app_user: Option<bool>,
    #[serde(rename = "is_bot")]
    pub is_bot: bool,
    #[serde(rename = "is_owner", skip_serializing_if = "Option::is_none")]
    pub is_owner: Option<bool>,
    #[serde(rename = "is_primary_owner", skip_serializing_if = "Option::is_none")]
    pub is_primary_owner: Option<bool>,
    #[serde(rename = "is_restricted", skip_serializing_if = "Option::is_none")]
    pub is_restricted: Option<bool>,
    #[serde(rename = "is_ultra_restricted", skip_serializing_if = "Option::is_none")]
    pub is_ultra_restricted: Option<bool>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "profile")]
    pub profile: Box<crate::api_client::models::UsersListMemberProfile>,
    #[serde(rename = "real_name", skip_serializing_if = "Option::is_none")]
    pub real_name: Option<String>,
    #[serde(rename = "team_id")]
    pub team_id: String,
    #[serde(rename = "tz", skip_serializing_if = "Option::is_none")]
    pub tz: Option<String>,
    #[serde(rename = "tz_label", skip_serializing_if = "Option::is_none")]
    pub tz_label: Option<String>,
    #[serde(rename = "tz_offset", skip_serializing_if = "Option::is_none")]
    pub tz_offset: Option<f32>,
    #[serde(rename = "updated")]
    pub updated: f32,
}

impl UsersListMember {
    pub fn new(deleted: bool, id: String, is_bot: bool, name: String, profile: crate::api_client::models::UsersListMemberProfile, team_id: String, updated: f32) -> UsersListMember {
        UsersListMember {
            color: None,
            deleted,
            has_2fa: None,
            id,
            is_admin: None,
            is_app_user: None,
            is_bot,
            is_owner: None,
            is_primary_owner: None,
            is_restricted: None,
            is_ultra_restricted: None,
            name,
            profile: Box::new(profile),
            real_name: None,
            team_id,
            tz: None,
            tz_label: None,
            tz_offset: None,
            updated,
        }
    }
}


