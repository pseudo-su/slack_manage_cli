/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: support@slack.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationsListGroup {
    #[serde(rename = "created")]
    pub created: f32,
    #[serde(rename = "creator")]
    pub creator: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "is_archived")]
    pub is_archived: bool,
    #[serde(rename = "is_channel")]
    pub is_channel: bool,
    #[serde(rename = "is_ext_shared")]
    pub is_ext_shared: bool,
    #[serde(rename = "is_general")]
    pub is_general: bool,
    #[serde(rename = "is_group")]
    pub is_group: IsGroup,
    #[serde(rename = "is_im")]
    pub is_im: bool,
    #[serde(rename = "is_member")]
    pub is_member: bool,
    #[serde(rename = "is_mpim")]
    pub is_mpim: bool,
    #[serde(rename = "is_open")]
    pub is_open: bool,
    #[serde(rename = "is_org_shared")]
    pub is_org_shared: bool,
    #[serde(rename = "is_pending_ext_shared")]
    pub is_pending_ext_shared: bool,
    #[serde(rename = "is_private")]
    pub is_private: bool,
    #[serde(rename = "is_shared")]
    pub is_shared: bool,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "name_normalized")]
    pub name_normalized: String,
    #[serde(rename = "pending_shared")]
    pub pending_shared: Vec<serde_json::Value>,
    #[serde(rename = "priority")]
    pub priority: f32,
    #[serde(rename = "purpose")]
    pub purpose: Box<crate::api_client::models::ConversationsListChannelPurpose>,
    #[serde(rename = "topic")]
    pub topic: Box<crate::api_client::models::ConversationsListChannelTopic>,
    #[serde(rename = "unlinked")]
    pub unlinked: f32,
}

impl ConversationsListGroup {
    pub fn new(created: f32, creator: String, id: String, is_archived: bool, is_channel: bool, is_ext_shared: bool, is_general: bool, is_group: IsGroup, is_im: bool, is_member: bool, is_mpim: bool, is_open: bool, is_org_shared: bool, is_pending_ext_shared: bool, is_private: bool, is_shared: bool, name: String, name_normalized: String, pending_shared: Vec<serde_json::Value>, priority: f32, purpose: crate::api_client::models::ConversationsListChannelPurpose, topic: crate::api_client::models::ConversationsListChannelTopic, unlinked: f32) -> ConversationsListGroup {
        ConversationsListGroup {
            created,
            creator,
            id,
            is_archived,
            is_channel,
            is_ext_shared,
            is_general,
            is_group,
            is_im,
            is_member,
            is_mpim,
            is_open,
            is_org_shared,
            is_pending_ext_shared,
            is_private,
            is_shared,
            name,
            name_normalized,
            pending_shared,
            priority,
            purpose: Box::new(purpose),
            topic: Box::new(topic),
            unlinked,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IsGroup {
    #[serde(rename = "true")]
    _True,
}

impl Default for IsGroup {
    fn default() -> IsGroup {
        Self::_True
    }
}

